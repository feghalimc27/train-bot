name: Docker Image CI

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GCP_ARTIFACT_LOCATION }}
  SERVICE: train-bot-x86

jobs:

  build:    
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT }}'

    - name: Docker Auth
      id: docker-auth
      uses: 'docker/login-action@v3'
      with:
        username: 'oauth2accesstoken'
        password: '${{ steps.auth.outputs.access_token }}'
        registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

    - name: Create .env file
      run: |-
        touch .env

        echo APP_ID=${{ secrets.ENV_APP_ID }} >> .env
        echo DISCORD_TOKEN=${{ secrets.ENV_DISCORD_TOKEN }} >> .env
        echo PUBLIC_KEY=${{ secrets.ENV_DISCORD_PUBLIC_KEY }} >> .env
        echo COUNTING_CHANNEL_ID=${{ secrets.ENV_COUNTING_CHANNEL_ID }} >> .env
        echo PIN_CHANNEL_ID=${{ secrets.ENV_PIN_CHANNEL_ID }} >> .env
        echo GUILD_ID=${{ secrets.ENV_GUILD_ID }} >> .env
        echo GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID_GEMINI }} >> .env
        echo GCP_REGION=${{ vars.GCP_REGION_GEMINI }} >> .env
        echo GEMINI_MODEL_DEFAULT=${{ vars.GCP_GEMINI_MODEL }} >> .env
        echo GEMINI_MAX_PROMPT_LENGTH=${{ vars.GCP_GEMINI_MAX_PROMPT }} >> .env
        echo GEMINI_MAX_OUTPUT_TOKENS=${{ vars.GCP_GEMINI_MAX_OUTPUT }} >>.env

        ls -la .

    - name: Build and push the Docker image
      run: |-
        docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/docker-images/${{ env.SERVICE }}" .
        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/docker-images/${{ env.SERVICE }}"
